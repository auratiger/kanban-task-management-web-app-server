# Share Compose configurations between files and projects: https://docs.docker.com/compose/extends/#extending-services

# NOTE: Docker Composeâ€™s extends keyword enables the sharing of common configurations among different files,
# or even different projects entirely.
# Extending services is useful if you have several services that reuse a common set of configuration options.
# Using extends you can define a common set of service options in one place and refer to it from anywhere.
#
# NOTE: If a configuration option is defined in both the original service and the local service,
# the local value either overrides or extends the definition of the original service.
# This works differently for other configuration options.
services:
   base-postgres:
      image: postgres:latest
      restart: on-failure
      healthcheck:
         test: ['CMD', 'pg_isready', '-q', '-d', 'database', '-U', 'prisma']
         interval: 2s
         timeout: 10s
         retries: 10

   base-mongo:
      image: mongo:latest
      restart: on-failure
      healthcheck:
         # NOTE: The hostname of the container, let's say `mongo` doesn't exist inside the mongodb container,
         # unless you specify hostname: `mongo` in your compose file.
         # Instead it is better to simply use `localhost` which is more common, when doing healthchecks
         #
         # NOTE: The legacy `mongo` shell was deprecated in `MongoDB 5.0` and removed in `MongoDB 6.0`.
         # The new MongoDB Shell, `mongosh`, offers numerous advantages over the legacy shell.
         #
         # NOTE: You need to use double-dollar sign ($$) in order to tell docker-compose not to parse these environment variables.
         # test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
         test: echo 'db.runCommand({serverStatus:1}).ok'
         interval: 10s
         start_period: 20s
